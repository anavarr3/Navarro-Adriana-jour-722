filter(term == 202308) |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n()
) |>
arrange(desc(count_syllabus_count >=1))
view(fall_23)
fall_23 <- umd_courses |>
filter(term == 202308) |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n()
) |>
arrange(desc(count_syllabus_count))
view(fall_23)
dept_offered <- fall_23 |>
group_by(department) |>
summarise(
count_department = n())
view(dept_offered)
org_dep <- umd_courses |>
group_by(term) |>
summarise(
count_term = n()
)
view(org_dep)
fall_23 <- umd_courses |>
filter(term == 202308) |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n()
) |>
arrange(desc(count_syllabus_count))
view(fall_23)
fall_23 <- umd_courses |>
filter(term == 202308) |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n(),
count_department = n()
) |>
arrange(desc(count_syllabus_count))
view(fall_23)
fall_23 <- umd_courses |>
filter(term == 202308) |>
group_by(department) |>
summarise(
count_title = n()
)
view(fall_23)
fall_23 <- umd_courses |>
filter(term == 202308) |>
group_by(department) |>
summarise(
count_title = n()
) |>
arrange (desc(count_title))
view(fall_23)
fall_syllabus <- fall_2023 |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n(),
) |>
arrange(desc(count_syllabus_count))
fall_syllabus <- fall_23 |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n(),
) |>
arrange(desc(count_syllabus_count))
# Finding which departments offered the most courses in the Fall 2023 term
fall_23 <- umd_courses |>
filter(term == 202308) |>
group_by(department) |>
summarise(
count_title = n()
) |>
arrange (desc(count_title))
view(fall_23)
fall_syllabus <- umd_courses |>
filter(term == 202308) |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n(),
) |>
arrange(desc(count_syllabus_count))
fall_syllabus <- umd_courses |>
filter(term == 202308) |>
filter(syllabus_count >= 1) |>
group_by(department) |>
summarise(
count_syllabus_count = n(),
) |>
arrange(desc(count_syllabus_count))
view(fall_syllabus)
setwd("~/Documents/GitHub/Navarro-Adriana-jour-722/pre_lab_02")
View(maryland_expenses)
library(lubridate)
maryland_expenses(head)
head(maryland_expenses)
# Change datatype of expenditure_date column to number
New_md <- maryland_expenses |> mutate(expenditure_date=mdy(expenditure_date))
head(New_md)
New_md <- month_expense
New_md -> month_expense
mutate(month = floor_date(expenditure_date, "month")) |>
group_by(month) |>
summarise(total_amount = sum(amount)) |>
arrange(desc(total_amount))
New_md -> month_expense |>
mutate(month = floor_date(expenditure_date, "month")) |>
group_by(month) |>
summarise(total_amount = sum(amount)) |>
arrange(desc(total_amount))
New_md |>
mutate(month = floor_date(expenditure_date, "month")) |>
group_by(month) |>
summarise(total_amount = sum(amount)) |>
arrange(desc(total_amount))
Moore_spending <- New_md |>
filter(committee == "Moore  Wes For Maryland")
Moore_spending <- New_md |>
filter(committee_name == "Moore  Wes For Maryland")
mutate(month = floor_date(expenditure_date, "month")) |>
group_by(month) |>
summarise(total_amount = sum(amount)) |>
arrange(desc(total_amount))
Moore_spending <- New_md |>
filter(committee_name == "Moore  Wes For Maryland")
Moore_spending <- New_md |>
filter(committee_name == "Moore  Wes For Maryland")
head(Moore_spending)
Moore_spending |>
mutate(month = floor_date(expenditure_date, "month")) |>
group_by(month) |>
summarise(total_amount = sum(amount)) |>
arrange(desc(total_amount))
Moore_spending |>
mutate(month = floor_date(expenditure_date, "month")) |>
group_by(month) |>
summarise(total_amount = sum(amount)) |>
arrange(month)
# Chart showing specifically the spending by Moore Wes For Maryland
Moore_spending <- New_md |>
filter(committee_name == "Moore Wes For Maryland")
head(Moore_spending)
# Chart showing specifically the spending by Moore Wes For Maryland
Moore_spending <- New_md |>
filter(committee_name == "Moore  Wes For Maryland")
head(Moore_spending)
Moore_spending |>
mutate(month = floor_date(expenditure_date, "month"))
# Chart showing specifically the spending by Moore Wes For Maryland
Moore_spending <- New_md |>
filter(committee_name == "Moore  Wes For Maryland")
head(Moore_spending)
knitr::opts_chunk$set(echo = TRUE)
general_22 <- general_22 |>
mutate(
total_votes = cox + moore + lashar + wallace + write_ins,
pct_moore = moore/total_votes
)
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
umd_courses <- read_rds("data/umd_courses.rds")
summary(umd_courses)
colnames(umd_courses)
journalism_courses <- umd_courses |> filter(department == "Journalism")
head(journalism_courses)
courses_2023 <- umd_courses |> filter(term > 202300)
head(courses_2023)
selected_journalism_courses <- journalism_courses |> select(id, title)
head(selected_journalism_courses)
theatre_seats_15 <- umd_courses |> filter(department == "Theatre") |> filter(seats >= 15)
nrow(theatre_seats_15)
and_theatre_seats_15 <- umd_courses |> filter(department == "Theatre" & seats >= 15)
nrow(and_theatre_seats_15)
and_theatre_seats_15 <- umd_courses |> filter(department == "Theatre" | seats >= 15)
nrow(and_theatre_seats_15)
umd_courses |>
filter(str_detect(title, "Shakespeare"))
maryland_expenses <- read_csv("data/maryland_expenses.csv")
head(maryland_expenses)
library(tidyverse)
library(lubridate)
maryland_expenses <- read_csv("data/maryland_expenses.csv")
head(maryland_expenses)
maryland_expenses <- maryland_expenses |> mutate(expenditure_date=mdy(expenditure_date))
head(maryland_expenses)
maryland_expenses |>
mutate(month = floor_date(expenditure_date, "month")) |>
group_by(month) |>
summarise(total_amount = sum(amount)) |>
arrange(desc(total_amount))
general_22 <- read_csv('data/md_gov_county.csv')
general_22 <- general_22 |>
mutate(
total_votes = cox + moore + lashar + wallace + write_ins,
pct_moore = moore/total_votes
)
general_22 <- general_22 |>
mutate(
total_votes = cox + moore + lashar + wallace + write_ins,
pct_moore = moore/total_votes
)
head(general_22)
Moore_spending |>
mutate(month = floor_date(expenditure_date, "month"))
Head(Moore_spending)
Moore_spending |>
mutate(month = floor_date(expenditure_date, "month"))
head(Moore_spending)
# Chart showing specifically the spending by Moore Wes For Maryland
Moore_spending <- New_md |>
filter(committee_name == "Moore  Wes For Maryland")
head(Moore_spending)
Moore_Monthly_Spending = Moore_spending$Month
month = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
new_md <- month
month = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
new_md <- month
head(new_md)
# create a column in the Maryland expenses data called `spending_location` indicating whether each record spent money in Maryland or outside Maryland. For records that are in Maryland, make the new column's value "In-state" and for all others, make it "Out of state".
money <- maryland_expenses |>
mutate(
spending_location = case_when(
str_detect(address, " Maryland ") ~ "In-state",
.default = "Out of state"
))
# create a column in the Maryland expenses data called `spending_location` indicating whether each record spent money in Maryland or outside Maryland. For records that are in Maryland, make the new column's value "In-state" and for all others, make it "Out of state".
money <- maryland_expenses |>
mutate(
spending_location = case_when(
str_detect(address, " Maryland ") ~ "In-state",
.default = "Out of state"
head(money)
# create a column in the Maryland expenses data called `spending_location` indicating whether each record spent money in Maryland or outside Maryland. For records that are in Maryland, make the new column's value "In-state" and for all others, make it "Out of state".
money <- maryland_expenses |>
mutate(
spending_location = case_when(
str_detect(address, " Maryland ") ~ "In-state",
.default = "Out of state"
))
head(money)
money |>
group_by( spending_location) |>
summarize(total = sum(amount)) |>
arrange(desc(total))
# create a column in the Maryland expenses data called `spending_location` indicating whether each record spent money in Maryland or outside Maryland. For records that are in Maryland, make the new column's value "In-state" and for all others, make it "Out of state".
money <- maryland_expenses |>
mutate(
spending_location = case_when(
str_detect(address, " Maryland ") ~ "In-state",
.default = "Out of state",
group_by(spending_location) |>
summarize(total = sum(amount)) |>
arrange(desc(total))
))
# create a column in the Maryland expenses data called `spending_location` indicating whether each record spent money in Maryland or outside Maryland. For records that are in Maryland, make the new column's value "In-state" and for all others, make it "Out of state".
money <- maryland_expenses |>
mutate(
spending_location = case_when(
str_detect(address, " Maryland ") ~ "In-state",
.default = "Out of state",
group_by(spending_location) |>
summarize(total = sum(amount)) |>
arrange(desc(total))
))
# create a column in the Maryland expenses data called `spending_location` indicating whether each record spent money in Maryland or outside Maryland. For records that are in Maryland, make the new column's value "In-state" and for all others, make it "Out of state".
money <- maryland_expenses |>
mutate(
spending_location = case_when(
str_detect(address, " Maryland ") ~ "In-state",
.default = "Out of state",
group_by(spending_location)
))
# create a column in the Maryland expenses data called `spending_location` indicating whether each record spent money in Maryland or outside Maryland. For records that are in Maryland, make the new column's value "In-state" and for all others, make it "Out of state".
money <- maryland_expenses |>
mutate(
spending_location = case_when(
str_detect(address, " Maryland ") ~ "In-state",
.default = "Out of state"
))
head(money)
#How often was Firehouse Subs logged as an expense?
Subs <- maryland_expenses |>
filter(payee_name == "Firehouse Subs")
summarize(total = sum(amount))
#How often was Firehouse Subs logged as an expense?
Subs <- maryland_expenses |>
filter(payee_name == "Firehouse Subs")
summarize(amount = sum(amount))
#How often was Firehouse Subs logged as an expense?
Subs <- maryland_expenses |>
filter(payee_name == "Firehouse Subs")
summarize(total = sum(amount))
#How often was Firehouse Subs logged as an expense?
Subs <- maryland_expenses |>
filter(payee_name == "Firehouse Subs")
group_by(payee_name) |>
summarize(total = sum(amount))
#How often was Firehouse Subs logged as an expense?
Subs <- maryland_expenses |>
filter(payee_name == "Firehouse Subs") |>
summarize(total = sum(amount))
head(Subs)
# What percentage of payee names are unaccounted for?
missing_payees <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
))
# What percentage of payee names are unaccounted for?
missing_payees <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
)
# What percentage of payee names are unaccounted for?
missing_payees <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
)
head(missing_payees)
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
)
head(payee_count)
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
)
arrange(desc(count_payee_name))
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
arrange(desc(count_payee_name))
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
)
arrange(desc(count_payee_name))
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
head(payee_count)
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
head(payee_count)
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(payee_count)
payee_count <- payee_percent |>
group_by(payee) |>
summarize(total = sum(amount)) |>
arrange(desc(total))
payee_percent <- payee_count |>
group_by(payee) |>
summarize(total = sum(amount)) |>
arrange(desc(total))
payee_percent <- payee_count |>
group_by(payee_name) |>
summarize(total = sum(amount)) |>
arrange(desc(total))
payee_percent <- payee_count |>
group_by(payee_name) |>
summarize(total = sum(count_payee_name)) |>
arrange(desc(total))
payee_percent <- payee_count |>
group_by(payee_name) |>
summarize(total = sum(count_payee_name)) |>
arrange(desc(total))
view(payee_percent)
payee_percent <- payee_count |>
group_by(payee_name) |>
summarize(total = sum(count_payee_name)) |>
view(payee_percent)
payee_percent <- payee_count |>
group_by(payee_name) |>
summarize(total = sum(count_payee_name))
view(payee_percent)
payee_percent <- payee_count |>
mutate(
payee_total = sum(payee_count)
)
payee_total <- payee_count |>
mutate(
payee_total = sum(payee_count)
)
payee_total <- payee_count |>
mutate(
payee_name = sum(payee_count)
)
payee_total <- payee_count |>
mutate(
sum(payee_count)
)
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(payee_count)
payee_total <- payee_count |>
mutate(
total == sum(payee_count)
)
payee_total <- payee_count |>
mutate(
total = sum(payee_count)
)
# What percentage of payee names are unaccounted for?
payee_count <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(payee_count)
# What number of payee names are unaccounted for?
no_payee <- maryland_expenses |>
filter(payee_name = "NA")
# What number of payee names are unaccounted for?
no_payee <- maryland_expenses |>
filter(payee_name = "NA") |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
# What number of payee names are unaccounted for?
no_payee <- maryland_expenses |>
filter(payee_name == "NA") |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(no_payee)
# What number of payee names are unaccounted for?
no_payee <- maryland_expenses |>
group_by(payee_name) |>
filter(payee_name == "NA") |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(no_payee)
# What number of payee names are unaccounted for?
no_payee <- maryland_expenses |>
filter(payee_name == "NA") |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(no_payee)
# What number of payee names are unaccounted for?
no_payee <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(no_payee)
# How may times is "NA" listed for payee names? 3489 times -- the second-highest listing
no_payee <- maryland_expenses |>
filter(payee_name == "NA")
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
# How may times is "NA" listed for payee names? 3489 times -- the second-highest listing
no_payee <- maryland_expenses |>
filter(payee_name == "NA") |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(no_payee)
# How may times is "NA" listed for payee names? 3489 times -- the second-highest listing
no_payee <- maryland_expenses |>
filter(payee_name == NA) |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(no_payee)
# How may times is "NA" listed for payee names? 3489 times -- the second-highest listing
no_payee <- maryland_expenses |>
group_by(payee_name) |>
summarise(count_payee_name = n()
) |>
arrange(desc(count_payee_name))
view(no_payee)
